Play
════════════════════════════════════════════════════════════════════════

const GROUND_Y = SCREEN_SIZE.y-16
//const EXPLOSION_DURATION = 90
const EXPLOSION_MAX_RADIUS = 10
const MAX_PORTAL_RADIUS = 16
const WARP_DURATION = 3*BGM_FRAMES_PER_BEAT
const CURSOR_SPEED = 2.5
const WARP_CONNECTION_MAX_OPACITY = 0.4
const PORTAL_LIFETIME_FRAMES = 1800
const PORTAL_DRIFT_WAIT_INITIAL_MAX_FRAMES = 350
const PORTAL_DRIFT_WAIT_INITIAL_MIN_FRAMES = 150
const PORTAL_DRIFT_WAIT_MIN_FRAMES = 100
const PORTAL_DRIFT_WAIT_MAX_FRAMES = 200
const PORTAL_ANGLE_DRIFT_SPEED_MAX = 0.004 * π
const PORTAL_ANGLE_DRIFT_SPEED_MIN = 0.003 * π
const BUILDING_PUSH_RADIUS_INNER = 16
const BUILDING_PUSH_RADIUS_OUTER = 40
const BUILDING_PUSH_AMOUNT = 0.2
const PORTAL_PUSH_RADIUS_ADDITION_OUTER = 38
const PORTAL_PUSH_AMOUNT = 0.2
const PORTAL_BACKGROUND_RADIATION_PUSH_AMOUNT = 0.05
const BUILDING_FLASH_FRAMES = 60
const SESSION_FRAME_COUNT = 2 * 60 * 60

const SND_MISSILE_EXPLODE = {sound:explosion_sound, volume: 100%}
const SND_MISSILE_ENTER_PORTAL = {sound:warp_enter_sound, volume: 25%}
const SND_MISSILE_WARP = {sound:warp_sound, volume: 25%}
const SND_HIT_BUILDING = {sound:building_hit_sound, volume:50%}
const SND_MISSILE_EXIT_PORTAL = {sound:warp_exit_sound, volume: 25%}
const SND_PORTAL_PLACE1 = {sound:portal1_sound, volume: 50%}
const SND_PORTAL_PLACE2 = {sound:portal2_sound, volume: 50%}

const SHOW_ANCHOR_POS_DEBUGGING = false

def enter_gameover_mode(mode_input):
    set_mode(GameOver, mode_input) because "All buildings are destroyed"

def make_building(pos):
  return make_entity({
        pos: pos,
        z: 1,
        name: "Building",
        shape: "rect",
        sprite: prototype_blocks_sprite.building[0],
        override_color: rgba(1,1,1,0),
        last_hit_f: -∞,
    })
def itor_building_update(building):
    building.sprite = prototype_blocks_sprite.building.frame(mode_frames)
    building.override_color.a = lerp(1, 0, mode_frames, building.last_hit_f, building.last_hit_f+BUILDING_FLASH_FRAMES)
    return
        
def make_explosion(pos):
    play_sound({pitch: random(75%, 125%),
        pan: lerp(-100%, 100%, pos.x, 0, SCREEN_SIZE.x),
        ...SND_MISSILE_EXPLODE})
    return make_entity({
        pos: pos,
        size: xy(0,0),
        radius: 0,
        z: 2,
        shape: "disk",
        name:"Explosion",
        start_f: mode_frames,
        end_f: mode_frames+EXPLOSION_DURATION,
        hit_buildings: [],
    })
def itor_explosion_draw(e):
    let t = smootherstep(0, 1, lerp(0, 1, mode_frames, e.start_f, e.end_f))
    const color = perceptual_lerp_color(#ff0, #f00, t)
    const a = 1 - smootherstep(0.5, 1.0, t)
    draw_disk({pos:e.pos, radius:e.radius, color:rgba(color, a), z:e.z})
def itor_explosion_update(e):
    const t = (mode_frames - e.start_f) / (e.end_f - e.start_f)
    if t ≥ 1.0:
        return iterate.REMOVE
    e.radius = EXPLOSION_MAX_RADIUS * t
    e.size = xy(2*e.radius, 2*e.radius)
    // Collide with buildings
    for building in buildings:
        if find(e.hit_buildings, building) == ∅ and overlaps(e, building, false):
            building.last_hit_f = mode_frames
            building_hit_count += 1
            push(e.hit_buildings, building)
            play_sound({pan: lerp(-100%, 100%, e.pos.x, 0, SCREEN_SIZE.x),
                ...SND_HIT_BUILDING})
    
def make_missile():
    const target_building = random_value(buildings)
    if target_building == ∅:
        return // no buildings left to shoot at
    // spawn far enough off-screen to ensure we don't spawn inside a portal or explosion
    const missile_pos = xy(random_integer(0, SCREEN_SIZE.x-1), -max(EXPLOSION_MAX_RADIUS, MAX_PORTAL_RADIUS))
    const missile_dir = direction(target_building.pos - missile_pos)
    return make_entity({
        pos: missile_pos,
        z:2,
        size: xy(3,3),
        shape: "rect",
        dir: missile_dir,
        portal: ∅,
        portal_enter_f: -1,
        warp_sound: ∅,
    })
def itor_missile_draw(m):
    // draw missile
    if m.portal ≠ ∅: // ghost missile, mid-warp
        const src_pos = m.portal.pos
        const dst_pos = m.portal.buddy.pos
        const ghost_pos = lerp(src_pos, dst_pos, mode_frames, m.portal_enter_f, m.portal_enter_f+WARP_DURATION)
        draw_rect({pos:ghost_pos, size:m.size, color:#88f, z:m.z})
    else: // normal missile
        draw_rect({pos:m.pos, size:m.size, color:#f00, z:m.z})
    // draw trail
    const trail_frames = WARP_DURATION - (if m.portal ≠ ∅ then (mode_frames - m.portal_enter_f) else 0)
    const trail_end = m.pos - m.dir*trail_frames*3*MISSILE_SPEED
    let trail_points = []
    for 0 ≤ i ≤ 16:
        //draw_point({pos:lerp(m.pos, trail_end, i, 0, 16), z:m.z, color:rgba(#f00, lerp(1, 0, i, 0, 16))})
        push(trail_points, {pos:lerp(m.pos, trail_end, i, 0, 16) - xy(0.5,0.5), color:perceptual_lerp_color(#f00, #000, i/16)})
    for 0 ≤ i < 16:
        draw_line({A:trail_points[i].pos, B:trail_points[i+1].pos, z:m.z, color:trail_points[i].color})
    
def itor_missile_update(missile):
    // handle exiting the portal
    if missile.portal ≠ ∅:
        const start_pan = lerp(-100%, 100%, missile.pos.x, 0, SCREEN_SIZE.x)
        const end_pan = lerp(-100%, 100%, missile.portal.buddy.pos.x, 0, SCREEN_SIZE.x)
        set_pan(missile.warp_sound, lerp(start_pan, end_pan, mode_frames,
            missile.portal_enter_f, missile.portal_enter_f+WARP_DURATION))
        if mode_frames - missile.portal_enter_f ≥ WARP_DURATION:
            missile.dir = angle_to_xy( missile.portal.buddy.anchorTheta )
            missile.pos = missile.portal.buddy.pos + (missile.portal.buddy.radius+1) * missile.dir
            missile.portal = ∅
            missile.portal_enter_f = -1
            missile.warp_sound = ∅
            play_sound({pitch: random(75%, 125%),
                pan: lerp(-100%, 100%, missile.pos.x, 0, SCREEN_SIZE.x),
                ...SND_MISSILE_EXIT_PORTAL})
            for 0 ≤ i < PARTICLE_COUNT:
                push(particles, make_particle(missile.pos, PARTICLE_STYLE_EXIT))
        return iterate.CONTINUE // no further processing for missiles mid-warp
    
    missile.pos += MISSILE_SPEED * missile.dir
    // collide with portals
    for portal in portals:
        if overlaps(missile.pos, portal):
            missile.portal = portal
            missile.portal_enter_f = mode_frames
            play_sound({pitch: random(75%, 125%),
                pan: lerp(-100%, 100%, missile.pos.x, 0, SCREEN_SIZE.x),
                ...SND_MISSILE_ENTER_PORTAL})
            missile.warp_sound = play_sound({pitch: random(75%, 125%),
                pan: lerp(-100%, 100%, missile.pos.x, 0, SCREEN_SIZE.x),
                ...SND_MISSILE_WARP})
            for 0 ≤ i < PARTICLE_COUNT:
                push(particles, make_particle(missile.pos, PARTICLE_STYLE_ENTER))
            return iterate.CONTINUE // skip remaining checks when entering a portal        

    // collide with explosions
    if not missile.is_in_portal:
        let hit_explosion = false
        for explosion in explosions:
            if overlaps(missile, explosion, false):
                hit_explosion = true
                break
        if hit_explosion:
            push(explosions, make_explosion(missile.pos))
            return iterate.REMOVE        
    // collide with buildings
    for building in buildings:
        if overlaps(missile, building, false) and not find(missile.hit_buildings, building):
            push(explosions, make_explosion(missile.pos))
            return iterate.REMOVE
    // collide with ground
    if missile.pos.y ≥ GROUND_Y:
        push(explosions, make_explosion(missile.pos))
        return iterate.REMOVE
    // disappear on edge of screen
    if ( missile.pos.x < 0 ) or ( missile.pos.x > SCREEN_SIZE.x ) or ( missile.pos.y < -max(EXPLOSION_MAX_RADIUS, MAX_PORTAL_RADIUS) ):
        return iterate.REMOVE

def make_portal(pos):
    return make_entity({
        pos:pos,
        z: 2,
        shape:"disk",
        name:"Portal",
        radius: MAX_PORTAL_RADIUS,
        size: MAX_PORTAL_RADIUS*xy(2,2),
        anchorTheta: -0.5 * π,
        anchorTarget: -0.5 * π,
        anchorPosTarget: pos + ( MAX_PORTAL_RADIUS * angle_to_xy( lerp( -π, π, ξ ) ) ),
        anchorDriftSpeed: lerp( PORTAL_ANGLE_DRIFT_SPEED_MIN, PORTAL_ANGLE_DRIFT_SPEED_MAX, ξ ),
        driftWait: lerp( PORTAL_DRIFT_WAIT_INITIAL_MIN_FRAMES, PORTAL_DRIFT_WAIT_INITIAL_MAX_FRAMES, ξ ),
        positionDriftCenter: random_point_in_band_from_pos( pos, PORTAL_POS_DRIFT_SOURCE_DISTANCE.x, PORTAL_POS_DRIFT_SOURCE_DISTANCE.y ),
        doesDrift: false,
        isCollapsing: false,
        isDick: false,
        buddy: ∅,
        spawn_f: mode_frames,
    })
def itor_portal_update(portal):
    assert(portal.buddy ≠ 0, "All portals in the portal[] list must have a buddy")
    //If we do drift, either count down to our next drift, or start modifying our angle and position.
    if portal.doesDrift:
        if portal.driftWait > 0:
            --portal.driftWait
            //Set our new values for drift the frame it's about to happen.
            if ( portal.driftWait ≤ 0 ):
                //Choose a new aim angle, directly towards a building if we're being an asshole
                if ( ξ ≤ PORTAL_CHANCE_TO_BE_A_DICK ) and ( size( buildings ) > 0 ):
                    portal.anchorPosTarget = random_value( buildings ).pos
                    portal.isDick = true
                else:
                    portal.anchorPosTarget = portal.pos + ( MAX_PORTAL_RADIUS * lerp( -π, π, ξ ) )
                //Create a position and speed for a fictional solar wind that will push the portal
                portal.anchorDriftSpeed = lerp( PORTAL_ANGLE_DRIFT_SPEED_MIN, PORTAL_ANGLE_DRIFT_SPEED_MAX, ξ )
                portal.positionDriftCenter = random_point_in_band_from_pos( portal.pos, PORTAL_POS_DRIFT_SOURCE_DISTANCE.x, PORTAL_POS_DRIFT_SOURCE_DISTANCE.y )
        else:
            //DRIFT COOOOORE
            //Here, we check every frame to see if our closest approach is inside our buddy. If so, make it... not... inside our buddy
            const dirToAnchorPosition = direction( portal.anchorPosTarget - portal.pos )
            const vecToBuddy = portal.buddy.pos - portal.pos
            const pointOfClosestApproach = ( dot( vecToBuddy, dirToAnchorPosition ) * dirToAnchorPosition ) + portal.pos
            if ( dot( vecToBuddy, dirToAnchorPosition ) > 0 ) and ( magnitude( pointOfClosestApproach - portal.buddy.pos ) < MAX_PORTAL_RADIUS ):
                const randomMult = random( PORTAL_ANGLE_DRIFT_OFFSET_FROM_BUDDY.x, PORTAL_ANGLE_DRIFT_OFFSET_FROM_BUDDY.y )
                portal.anchorPosTarget = ( randomMult * MAX_PORTAL_RADIUS * direction( pointOfClosestApproach - portal.buddy.pos ) ) + portal.buddy.pos
            //Execute the solar wind push and the angular drift
            portal.anchorTarget = xy_to_angle( portal.anchorPosTarget - portal.pos )
            portal.anchorTheta = turn_towards( portal.anchorTheta, portal.anchorTarget, portal.anchorDriftSpeed )
            push_portal_from( portal, portal.positionDriftCenter, PORTAL_POS_DRIFT_PUSH_RANGE.x, PORTAL_POS_DRIFT_PUSH_RANGE.y, PORTAL_POS_DRIFT_PUSH_POWER )
            //If we've reached both our angle and position goals, consider this drift over, and pass the baton to our buddy.
            if ( portal.anchorTarget == portal.anchorTheta ) and ( magnitude( portal.pos - portal.positionDriftCenter ) > PORTAL_POS_DRIFT_PUSH_THRESHOLD ):
                portal.driftWait = lerp( PORTAL_DRIFT_WAIT_FRAMES.x, PORTAL_DRIFT_WAIT_FRAMES.y, ξ )
                //Hand off the drift baton to our buddy, so we alternate who mutates over time
                portal.doesDrift = not portal.doesDrift
                portal.buddy.doesDrift = not portal.buddy.doesDrift
        
    //Then do position pushes from buildings
    for building in buildings:
        push_portal_from( portal, building.pos, BUILDING_PUSH_RADIUS_INNER, BUILDING_PUSH_RADIUS_OUTER, BUILDING_PUSH_AMOUNT )
    //General push up
    push_portal_from( portal, xy( portal.pos.x, SCREEN_SIZE.y ), PORTAL_POS_DRIFT_UPWARD_RANGE.x * SCREEN_SIZE.y, PORTAL_POS_DRIFT_UPWARD_RANGE.y * SCREEN_SIZE.y, PORTAL_BACKGROUND_RADIATION_PUSH_AMOUNT )
    //Push away from other portals
    for otherPortal in portals:
        if otherPortal ≠ portal:
            push_portal_from( portal, otherPortal.pos, otherPortal.radius, otherPortal.radius + PORTAL_PUSH_RADIUS_ADDITION_OUTER, PORTAL_PUSH_AMOUNT )
    //Shrink portals if they're collapsing
    if portal.isCollapsing:
        portal.radius = max( 0, portal.radius - PORTAL_COLLAPSE_SPEED_PER_FRAME )
        if portal.radius == 0:
            return iterate.REMOVE
        portal.size = portal.radius * xy(2,2)
    //Check for situations that would cause the portal to collapse (eg hitting ground or edge of screen)
    if ( portal.pos.y ≥ GROUND_Y ) or ( portal.pos.x < 0 ) or ( portal.pos.x > SCREEN_SIZE.x ) or ( portal.pos.y < 0 ):
        portal.isCollapsing = true
        portal.buddy.isCollapsing = true

def push_portal_from(portal, pushSource, pushInnerRadius, pushOuterRadius, pushAmountAtInner):
    const vecToPortalFromSource = portal.pos - pushSource
    const distanceBetweenPortalAndSource = magnitude( vecToPortalFromSource )
    if ( distanceBetweenPortalAndSource > pushOuterRadius ) or ( equivalent(portal.pos, pushSource) ):
        return
    const pushPower = lerp( pushAmountAtInner, 0, max( distanceBetweenPortalAndSource - pushInnerRadius, 0 ) / ( pushOuterRadius - pushInnerRadius ) )
    portal.pos += pushPower * vecToPortalFromSource / distanceBetweenPortalAndSource

def random_point_in_band_from_pos( pos, radiusInner, radiusOuter ):
    return pos + ( lerp( radiusInner, radiusOuter, ξ ) * angle_to_xy( lerp( -π, π, ξ ) ) )

def turn_towards( angle_input, angle_target, angle_turn_amount ):
    const angleBetween = abs( loop( angle_target - angle_input, -π, π) )
    if angleBetween <= angle_turn_amount:
        return angle_target
    const lerp_amount = clamp( angle_turn_amount / max( 0.00001, angleBetween ), 0, 1 )
    return lerp_angle( angle_input, angle_target, lerp_amount )

def itor_portal_draw(portal):
    //debug to see point of drift - draw_disk({pos:portal.positionDriftCenter, z:portal.z + 2, radius:4, color: #f00, outline:#f00})
    // A portal with an unplaced buddy will still be passed to this function, so we must check for null buddy here.
    if portal.buddy == ∅:
        draw_disk({pos:portal.pos, z:portal.z, radius:MAX_PORTAL_RADIUS, color: #0000, outline:#248})
    else:
        // Draw portals in a different color if they're being a dick
        let anim = if portal.isDick then portal_sprite.spinning else portal_sprite.normal
        let frame = mode_frames
        draw_sprite({pos:portal.pos, z:portal.z, sprite:anim.frame(frame), scale:(portal.radius/MAX_PORTAL_RADIUS)*xy(1,1)})
        if SHOW_ANCHOR_POS_DEBUGGING:
            draw_disk({pos:portal.anchorPosTarget, z:portal.z + 1, radius:4, color: #c44, outline: #822})
        //We then make a constant line effect that zips between the two portals
        const edge_offset_mag = cos( 0.5 * π * bgm_measure_t )
        const grey_to_use = WARP_CONNECTION_MAX_OPACITY * edge_offset_mag
        let dir_to_buddy = portal.buddy.pos - portal.pos
        dir_to_buddy = edge_offset_mag * dir_to_buddy / magnitude( dir_to_buddy )
        const portal_edge_offset = xy( -1 * dir_to_buddy.y, dir_to_buddy.x ) * portal.radius
        //The buddy portal will draw the opposite offset edge from this
        const color_to_use = perceptual_lerp_color( #000, #48c, grey_to_use )
        draw_line({A: portal.pos + portal_edge_offset, B: portal.buddy.pos + portal_edge_offset, z: portal.z - 1, width: 1, color:color_to_use})
        //Next we draw the anchor line
        const anchorEndpoint = portal.pos + ( portal.radius * angle_to_xy( portal.anchorTheta )  ) // )
        draw_line({A: portal.pos, B: anchorEndpoint, z: portal.z + 1, width: 2, color: gray(1) })

const PARTICLE_STYLE_ENTER = 1
const PARTICLE_STYLE_EXIT = 2
def make_particle(pos, style):
    const point = pos + PARTICLE_RADIUS * random_within_circle()
    const spawn_pos = if style == PARTICLE_STYLE_ENTER then point else clone(pos)
    const goal_pos = if style == PARTICLE_STYLE_ENTER then clone(pos) else point
    return {
        goal_pos: goal_pos,
        style: style,
        color: #f00,
        spawn_pos: spawn_pos,
        spawn_f: mode_frames + random_integer(0, 10), // may spawn in the future
    }
def itor_particle_update(p):
    if mode_frames - p.spawn_f > PARTICLE_DURATION:
        return iterate.REMOVE
def itor_particle_draw(p):
    if mode_frames < p.spawn_f:
        return
    let t = lerp(0, 1, mode_frames, p.spawn_f, p.spawn_f + PARTICLE_DURATION)
    draw_point({
        pos: lerp(p.spawn_pos, p.goal_pos, if p.style == PARTICLE_STYLE_ENTER then pow(t,5) else pow(t,0.2)),
        color: p.color,//rgba(p.color, lerp(1, 0, t*t)),
        z: 40,
    })

let explosions = []
let buildings = []
let missiles = []
let portals = []
let particles = []
let current_portal = nil
let cursor_pos = 50% SCREEN_SIZE
let game_over_hook = ∅
let building_hit_count = 0
let max_missile_count = 1
let last_missile_spawn_f = 0

enter
────────────────────────────────────────────────────────────────────────
explosions = []
buildings = []
missiles = []
portals = []
particles = []
current_portal = nil
cursor_pos = 50% SCREEN_SIZE
game_over_hook = ∅
building_hit_count = 0
let max_missile_count = 1
last_missile_spawn_f = 0

// create building entities
for x in [64, 128, 192, 256, 320]:
    push(buildings, make_building(xy(x, GROUND_Y-4)))

set_post_effects({bloom: 50%})

if not bgm_is_playing():
    song_start()

frame
────────────────────────────────────────────────────────────────────────

song_update()

// handle input
cursor_pos.x = clamp(cursor_pos.x + (CURSOR_SPEED * joy.x), 0, SCREEN_SIZE.x-1)
cursor_pos.y = clamp(cursor_pos.y + (CURSOR_SPEED * joy.y), 0, SCREEN_SIZE.y-1)
if joy.aa:
    let portal = make_portal(cursor_pos)
    if current_portal == ∅: // first in pair
        current_portal = portal
        play_sound({pan: lerp(-100%, 100%, cursor_pos.x, 0, SCREEN_SIZE.x),
            ...SND_PORTAL_PLACE1})
    else: // second in pair
        portal.buddy = current_portal
        current_portal.buddy = portal
        current_portal.spawn_f = portal.spawn_f
        // Portals at the exact same location are no fun. Randomly offset the second one if needed.
        if equivalent(portal.pos, current_portal.pos):
            portal.pos += random_on_square()
        //Choose one portal or the other to drift
        if ( ξ > 0.5 ):
            portal.doesDrift = true
        else:
            current_portal.doesDrift = true
        // add both portals to the master list
        push(portals, current_portal, portal)
        current_portal = ∅
        play_sound({pan: lerp(-100%, 100%, cursor_pos.x, 0, SCREEN_SIZE.x),
            ...SND_PORTAL_PLACE2})

// randomly spawn a new missile
def should_spawn_missile():
    // Increase max missile count
    const MAX_MISSILE_INCREMENT_PERIOD_FRAMES = 20*60
    max_missile_count = 1 + floor(mode_frames / MAX_MISSILE_INCREMENT_PERIOD_FRAMES)
    if size(missiles) ≥ max_missile_count:
        return false // don't spawn missiles if we've already hit the max
    let spawn_chance = 0.003
    // Spawn more frequently the longer it's been since the last missile was spawned
    spawn_chance += lerp(0, 0.01, mode_frames, last_missile_spawn_f, last_missile_spawn_f+5*60)
    // Spawn more frequently if there are fewer missiles on screen
    spawn_chance += lerp(0.003, 0, size(missiles), 0, max_missile_count)
    return ξ < spawn_chance
if should_spawn_missile():
    last_missile_spawn_f = mode_frames
    const missile = make_missile()
    if missile ≠ ∅:
        push(missiles, missile)
// Grow/prune explosions
iterate(explosions, itor_explosion_update)
// Shrink/prune portals
const excess_portals = size(portals) - PORTAL_MAX_COUNT
for 0 ≤ i < excess_portals:
    portals[i].isCollapsing = true
    portals[i].buddy.isCollapsing = true
iterate(portals, itor_portal_update)
// Advance missiles & check for impact
iterate(missiles, itor_missile_update)
// Update buildings
iterate(buildings, itor_building_update)

// Check for game over
if mode_frames ≥ SESSION_FRAME_COUNT or (DEBUG_DEV_MODE and joy.qq):
    game_over_hook = add_frame_hook(fade_out, enter_gameover_mode, 2*60, ∅, {score:building_hit_count})

// Rendering
// cursor
draw_line({A:cursor_pos-xy(3,0), B:cursor_pos+xy(3,0), z:10, color:#f})
draw_line({A:cursor_pos-xy(0,3), B:cursor_pos+xy(0,3), z:10, color:#f})
// ground
local:
    draw_line({A:xy(0, GROUND_Y+0), B:xy(SCREEN_SIZE.x, GROUND_Y+0), z:0, color:#0f0})
    draw_line({A:xy(0, GROUND_Y+1), B:xy(SCREEN_SIZE.x, GROUND_Y+1), z:0, color:#0a0})
    draw_line({A:xy(0, GROUND_Y+8), B:xy(SCREEN_SIZE.x, GROUND_Y+8), z:0, color:#0f0})
    draw_line({A:xy(0, GROUND_Y+9), B:xy(SCREEN_SIZE.x, GROUND_Y+9), z:0, color:#0a0})
    for 0 ≤ i ≤ 12:
        const x_near = lerp(-80, SCREEN_SIZE.x+80, i, 0, 12)
        const x_far = lerp(0, SCREEN_SIZE.x, i, 0, 12)
        draw_line({A:xy(x_near, SCREEN_SIZE.y), B:xy(x_far, GROUND_Y), z:0, color:#0f0})
        draw_line({A:xy(x_near+0.5, SCREEN_SIZE.y+0.7), B:xy(x_far+0.5, GROUND_Y+0.7), z:0, color:#0f0})
// buildings
for building in buildings:
    draw_entity(building)
    // ignore this TODO; messages are illegible with bloom enabled
    //todo("Draw occasional chat messages from buildings in a tiny font")
// explosions
iterate(explosions, itor_explosion_draw)
// missiles
iterate(missiles, itor_missile_draw)
// portals
iterate(portals, itor_portal_draw)
if current_portal ≠ ∅:
    itor_portal_draw(current_portal)
// particles
iterate(particles, itor_particle_update)
iterate(particles, itor_particle_draw)
// UI
draw_text({font:menu_font, text:"Hit:" + building_hit_count, x_align:"left", y_align:"top",
    pos:xyz(5,5,200), color:#f, shadow:rgba(0,0,0,0.5), outline:#000})
draw_text({font:menu_font, text:format_number((SESSION_FRAME_COUNT-mode_frames)/60, "stopwatch"),
    x_align:"right", y_align:"top", pos:xyz(SCREEN_SIZE.x-5,5,200), color:#f,
    shadow:rgba(0,0,0,0.5), outline:#000})
// debug
if DEBUG_MUSIC:
    bgm_draw_debug()

leave
────────────────────────────────────────────────────────────────────────
reset_post_effects()
remove_frame_hooks_by_mode(get_mode())
