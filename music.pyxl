const BGM_BEATS_PER_MEASURE = 4
const BGM_FRAMES_PER_BEAT = 17
const BGM_SECONDS_PER_BEAT = BGM_FRAMES_PER_BEAT / 60
const BGM_BEATS_PER_MINUTE = 60 / (2*BGM_SECONDS_PER_BEAT)
const BGM_SECONDS_PER_MEASURE = BGM_SECONDS_PER_BEAT * BGM_BEATS_PER_MEASURE
const BGM_FRAMES_PER_MEASURE = round(BGM_BEATS_PER_MEASURE * BGM_FRAMES_PER_BEAT)

let bgm_now = -1 // elapsed time the music has been playing, in seconds.
let bgm_now_f = -1 // elapsed time the music has been playing, in frames.
let bgm_beat = -1 // whole-number beat
let bgm_measure = -1 // whole-number measure
let bgm_beat_in_measure = -1 // whole-number beat index within each measure [0..BGM_BEATS_PER_MEASURE-1] 
let bgm_beat_t = 0 // progress within the current beat [0..1]
let bgm_measure_t = 0 // progress within the current measure [0..1]
let bgm_beat_f = 0 // frame within the current beat [0..BGM_FRAMES_PER_BEAT-1]
let bgm_measure_f = 0 // frame within the current measure [0..BGM_FRAMES_PER_MEASURE-1]
let bgm_dur_f = 0 // duration of current clip, in frames
// is this the first frame these variables have their current values?
let bgm_beat_ff = false
let bgm_measure_ff = false
let bgm_loop_t = 0 // progress within the current clip [0..1]
let bgm_loop_ff = 0

// Internal state
let bgm_loop = nil

def bgm_is_playing():
    return bgm_loop ≠ nil

// loop_args is an object that will be passed to play_sound()
def bgm_start(loop_args):
    bgm_stop() // stop existing loop
    if loop_args ≠ ∅:
        debug_print(loop_args)
        bgm_loop = play_sound(loop_args)
        bgm_dur_f = round(bgm_loop.sound.duration * 60)
    

def bgm_stop():
    if bgm_loop ≠ ∅:
        stop_audio(bgm_loop)
    bgm_loop = nil
    todo("zero out all the state variables")

def bgm_update():
    if bgm_loop == ∅:
        return
    let prev_beat = bgm_beat
    let prev_measure = bgm_measure
    let prev_beat_in_measure = bgm_beat_in_measure
    let status = get_audio_status(bgm_loop)
    bgm_now = status.now
    bgm_now_f = status.now * 60
    bgm_loop_t = loop(bgm_now_f / bgm_dur_f, 0.0, 1.0)
    const f = bgm_now_f
    bgm_beat = floor(f / BGM_FRAMES_PER_BEAT);
    bgm_measure = floor(f / BGM_FRAMES_PER_MEASURE)
    bgm_beat_in_measure = bgm_beat mod BGM_BEATS_PER_MEASURE
    bgm_beat_f = floor(f mod BGM_FRAMES_PER_BEAT)
    bgm_measure_f = floor(f mod BGM_FRAMES_PER_MEASURE)
    bgm_beat_t = bgm_beat_f / BGM_FRAMES_PER_BEAT
    bgm_measure_t = bgm_measure_f / BGM_FRAMES_PER_MEASURE
    bgm_beat_ff = (bgm_beat != prev_beat)
    bgm_measure_ff = (bgm_measure != prev_measure)
    
def bgm_set_volumes(volume):
    if bgm_loop ≠ ∅:
        set_volume(bgm_loop, vol)
    
def bgm_draw_debug(z default 0) preserving_transform:
    reset_transform()
    let tp = xy(0,0)
    const BGM_DEBUG_TEXT_ARGS = {font:font, color:#f, x_align:"left", y_align:"top", z:z}
    const MAX_BAR_WIDTH = 40
    const BAR_HEIGHT = 5
    draw_text({text:"Beat=" + bgm_beat, pos:tp, ...BGM_DEBUG_TEXT_ARGS})
    tp.y += font.line_height
    draw_text({text:"Meas=" + bgm_measure, pos:tp, ...BGM_DEBUG_TEXT_ARGS})
    tp.y += font.line_height
    draw_text({text:"BIM=" + bgm_beat_in_measure, pos:tp, ...BGM_DEBUG_TEXT_ARGS})
    tp.y += font.line_height
    draw_text({text:"BMF=" + bgm_measure_f, pos:tp, ...BGM_DEBUG_TEXT_ARGS})
    tp.y += font.line_height
    draw_text({text:"t=" + format_number(bgm_loop_t, "0.000") + " DUR=" + bgm_dur_f, pos:tp, ...BGM_DEBUG_TEXT_ARGS})
    tp.y += font.line_height
    draw_text({text:"state=" + song_get_state_name(), pos:tp, ...BGM_DEBUG_TEXT_ARGS})
    tp.y += font.line_height
    draw_corner_rect({corner:tp, size:xy(MAX_BAR_WIDTH, BAR_HEIGHT), outline:#0ff, color:rgba(0,0,0,0), z:z})
    draw_corner_rect({corner:tp, size:xy(bgm_beat_t * MAX_BAR_WIDTH, BAR_HEIGHT), color:#0ff, z:z})
    draw_corner_rect({corner:tp + xy(0,2*BAR_HEIGHT), size:xy(MAX_BAR_WIDTH, BAR_HEIGHT), outline:#0ff, color:rgba(0,0,0,0), z:z})
    draw_corner_rect({corner:tp + xy(0,2*BAR_HEIGHT), size:xy(bgm_measure_t * MAX_BAR_WIDTH, BAR_HEIGHT), color:#0ff, z:z})
    
    
////////////// Game-specific song state machine

let song_states = {
    Intro: {
        name:"Intro",
        transitions: [
            {name:"SilenceTo0", clips: [transSilenceTo0_sound], destination:"0"},
        ],
    },
    0: {
        name:"0",
        transitions: [
            {name:"loop", clips: [loop0_sound], destination:"0"},
            {name:"0toA", clips: [trans0toA_sound], destination:"A"},
        ],
    },
    A: {
        name:"A",
        transitions: [
            {name:"loop", clips: [loopA_sound], destination:"A"},
            {name:"AtoB", clips: [transAtoB_sound], destination:"B"},
        ],
    },
    B: {
        name:"B",
        transitions: [
            {name:"loop", clips: [loopB_sound], destination:"B"},
            {name:"BtoC", clips: [transBtoC_sound], destination:"C"},
        ],
    },
    C: {
        name:"C",
        transitions: [
            {name:"loop", clips: [loopC_sound], destination:"C"},
            {name:"CtoE", clips: [transCtoD_sound, transDEA_sound], destination:"E"},
            {name:"CtoA", clips: [transCtoD_sound, transDEA_sound, transDEAtoA_sound], destination:"A"},
        ],
    },
    E: {
        name:"E",
        transitions: [
            {name:"EtoF", clips: [loopE_sound, transEIFBC_sound], destination:"F"},
            {name:"EtoC", clips: [loopE_sound, transEIFBC_sound, transBtoC_sound], destination:"C"},
            {name:"EtoH", clips: [loopE_sound, transEIFBC_sound], destination:"H"},
        ],
    },
    F: {
        name:"F",
        transitions: [
            {name:"loop", clips: [loopF_sound], destination:"F"},
            {name:"FtoH", clips: [loopF_sound], destination:"H"},
            {name:"FtoC", clips: [transFHI_sound, transEIFBC_sound, transBtoC_sound], destination:"C"},
        ],
    },
    H: {
        name:"H",
        transitions: [
            {name:"loop", clips: [loopH_sound], destination:"H"},
            {name:"HtoF", clips: [transFHI_sound, transEIFBC_sound], destination:"F"},
            {name:"HtoC", clips: [transFHI_sound, transEIFBC_sound, transBtoC_sound], destination:"C"},
        ],
    },
}

let song_current_state = ∅
let song_current_sound = ∅
let song_current_transition = ∅
let song_current_clip_index = 0
def song_start():
    song_current_state = song_states["Intro"]
    song_current_transition = song_current_state.transitions[0]
    song_current_clip_index = 0
    song_current_sound = bgm_start({sound: song_current_transition.clips[song_current_clip_index], loop:true})

def song_get_state_name():
    return song_current_state.name + "." + song_current_transition.name + "[" + song_current_clip_index + "]"
    
def song_update():
    bgm_update()
    if bgm_now_f ≥ bgm_dur_f or (DEBUG_MUSIC and joy.ff): // current clip has ended
        bgm_stop()
        const start_sec = 0
        // If we've exhausted the clips in the current transition, switch to its destination state
        song_current_clip_index += 1
        if song_current_clip_index ≥ size(song_current_transition.clips):
            let next_state = song_states[song_current_transition.destination]
            if next_state != song_current_state or size(next_state.transitions) == 1:
                song_current_transition = next_state.transitions[0] // always play transition 0 at least once
            else:
                song_current_transition = random_value(slice(next_state.transitions, 1))
            song_current_state = next_state
            song_current_clip_index = 0
        debug_print("playing: " + song_get_state_name())
        song_current_sound = bgm_start({sound: song_current_transition.clips[song_current_clip_index],
            start_sec: start_sec, loop:true})
        bgm_update()
